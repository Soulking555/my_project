# Live Character Counter - Experiment 4

To develop a web page that counts and displays the number of characters entered into a textarea in real time, helping users get instant feedback as they type or delete text.

## Components Used

### HTML Elements
HTML Elements
<textarea> → to allow the user to type text.
<div> / <p> → to display the character count.
<span> → to dynamically update the character value.
<h3> → heading for the project.

### JavaScript Technologies
Event Listener (input) → detects user typing, deleting, or pasting text.
DOM Manipulation (getElementById, textContent) → updates the character count dynamically.
String Property (value.length) → used to calculate the number of characters.

### CSS Technologies
Borders, padding, and margins for layout.
Font styling (font-size, font-weight) for readability.
Box model styling for a clean UI.

## JavaScript Interactive Mechanism
   
### How JavaScript Connects to the Project
JavaScript links the textarea input to the character counter display.
Every time the user types or deletes, the input event triggers a function that updates the counter.
---

## Simple Line-by-Line Explanation of JavaScript

```javascript
const textarea = document.getElementById('textInput');
const charCount = document.getElementById('charCount');
//Selects the textarea and span elements using their IDs.
textarea.addEventListener('input', () => {
    const value = textarea.value;
    const newlineCount = (value.match(/\n/g) || []).length;
    charCount.textContent = value.length - newlineCount;
});
```
Adds an event listener for the input event.
Reads the text entered by the user.
Counts characters (excluding newline characters).
Updates the counter in real time.
---

#### Summary of JavaScript Flow
1. Wait for user input.
2. Count characters entered.
3. Update the character counter dynamically.

## Key JavaScript Properties & Logic
- `textarea.value` → captures input text.
- `.length` → calculates total characters.
- `eventListener('input')` → ensures live updates.
- `.textContent` → updates DOM instantly.

## CSS Styling (Summary)

The CSS in this experiment is minimal and only used for basic layout and readability:
- `.counter-box` → defines the bordered box layout.
- `textarea` → styled for proper width and readable font size.
- `.char-count` → emphasized with bold text for visibility.

## New Techniques Learned

### JavaScript & UI Interactivity
- Learned how to use event listeners for real-time updates.
- Practiced DOM manipulation for dynamic content.
- Explored how CSS enhances the user experience of simple projects.

### Progressive Enhancement
Unlike static HTML projects, this experiment adds real-time interactivity with JavaScript.
Compared to earlier HTML/CSS only experiments, this introduces dynamic DOM updates.

## File Structure

```css
Experiment-4/
├── Experiment-4.html   # Main HTML file
├── styles.css          # Minimal CSS for layout
├── script.js           # JavaScript for live character counting
└── README.md           # Project documentation
```

## Learning Objectives

- Understand how to connect JavaScript logic with HTML elements.
- Learn the use of input event for real-time updates.
- Practice DOM manipulation using .getElementById and .textContent.
- Apply CSS styling to improve UI.
- Gain experience in integrating HTML, CSS, and JS for interactive web features.
---
